文件管理
  修改暂存
    git add $fileName  //将文件添加到暂存区
    git add $dirName   //将目录（包括子目录）的文件添加到暂存区
  暂存区提交到本地仓库
    git commit -m "comment" [$file] //将暂存区（全部或指定文件）的内容提交到本地仓库
    git commit -m "comment" -a [$file] //将工作区和暂存区（全部或指定文件）的内容提交到本地仓库，相当于将git add/git commit操作合并
  删除文件
    希望将文件保留回工作区，不再跟踪
      step1: git add $file //先将修改临时暂存
      step2: git rm --cached $file //从暂存区删除
      step3: git commit -m "comment" //如果文件之前已经commit到本地仓库，需要再commit一次（将“文件从暂存区删除”的操作变更提交到本次仓库）
    希望直接将文件删除，不需要保留在工作区        
      step1: git rm -f $file
      step2: git commit -m "comment" //如果文件之前已经commit到本地仓库，需要再commit一次（将“文件从暂存区删除”的操作变更提交到本次仓库） 
  恢复工作区文件，使用暂存区版本
    git checkout -- $file //指定文件，使用暂存区版本覆盖当前的工作区
    git checkout -- .     //所有文件，使用暂存区版本覆盖当前的工作区 
  恢复工作区文件，使用远端commit版本
    git checkout $commid $file //指定文件，使用远端commit版本覆盖当前工作区
    git checkout $commid -- .  //所有文件，使用远端commit版本覆盖当前工作区      
        
        
  
分支管理
  切换到已有分支
      git checkout $brName
  创建分支  
    直接创建，并切换到新分支
      git checkout -b $newBrName  
    根据远端tag版本创建新分支，并切换到新分支
      git checkout -b $newBrName $tagName
    根据远端commit版本创建新分支，并切换到新分支
      git checkout -b $newBrName $commitid 

版本管理
  查看提交记录
    git log //默认查看当前分支的提交记录
    git log --grep=“keyword” //查看当前分支，提交comment信息中包含指定关键字的提交记录
    git log -n 3 //查看当前分支，指定只展示最近3个commit记录
    git log -- $file //查看当前分支，指定包含指定文件修改的提交记录
    git log --stat //查看当前分支，并展示文件修改行数统计
    git log --graph //查看当前分支，以可视化方式展示commit记录中分支合并关系，并格式化展示指定字段信息。其中
    git log --graph --format="%h %p %cd %s" //查看当前分支，以可视化方式展示commit记录中分支拓扑关系，并按格式化展示指定字段信息。其中%h为commit的简短id，%p为父commit的简短id, %cd为提交日期，%s为提交说明。
                                            //值得注意的是，%p展示的是父commit的列表，当存在分支合并时，合并后的commit节点就会有两个parent commit节点，父parent的顺序就是HEAD^n的顺序，HEAD^n表示第n个parent节点
    git log $brName //查看指定分支的提交记录
    git log $brName --oneline //查看指定分支，并以简洁格式展示（只有commitid前缀+comment）
    git log $brName --after="yyyy-mm-dd" --before="yyyy-mm-dd hh-mm-ss" --author="keyword" //查看指定分支，指定日期范围，指定作者（关键字）的提交记录
  
    
    

HEAD概念
  类似指针的概念，一般指向当前分支的最新commit版本。
  常用表达式
    HEAD~1，表示当前HEAD指向的前一个commit。依此类推，HEAD~N，表示当前HEAD指向的前N个commit。
    HEAD^2，表示当前commit的第二个parent commit节点，因为当存在多个分支合并的时候，某个commit节点可能会有多个parent节点
    






参考文档：https://initialcommit.com/cluster/git-guides-and-git-tutorials
