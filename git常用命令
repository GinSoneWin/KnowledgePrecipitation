文件管理
  修改暂存
    git add $fileName  //将文件添加到暂存区
    git add $dirName   //将目录（包括子目录）的文件添加到暂存区
  暂存区提交到本地仓库
    git commit -m "comment" [$file] //将暂存区（全部或指定文件）的内容提交到本地仓库
    git commit -m "comment" -a [$file] //将工作区和暂存区（全部或指定文件）的内容提交到本地仓库，相当于将git add/git commit操作合并
  提交到远端仓库
    git push origin master:master //将本地分支master推送到origin主机的master远程分支
    git push origin master //等价于git push origin master:master，意味着当本地分支和远端分支同名时可以省略远端分支名
  
  删除文件
    希望将文件保留回工作区，不再跟踪
      step1: git add $file //先将修改临时暂存
      step2: git rm --cached $file //从暂存区删除
      step3: git commit -m "comment" //如果文件之前已经commit到本地仓库，需要再commit一次（将“文件从暂存区删除”的操作变更提交到本次仓库）
    希望直接将文件删除，不需要保留在工作区        
      step1: git rm -f $file
      step2: git commit -m "comment" //如果文件之前已经commit到本地仓库，需要再commit一次（将“文件从暂存区删除”的操作变更提交到本次仓库） 
  丢弃工作区文件，使用暂存区版本覆盖
    git checkout -- $file //指定文件，使用暂存区版本覆盖当前的工作区
    git checkout -- .     //所有文件，使用暂存区版本覆盖当前的工作区 
  丢弃工作区文件，使用指定commit版本覆盖
    git checkout $commid -- $file //指定文件，使用指定commit版本覆盖当前工作区
    git checkout $commid -- .  //所有文件，使用指定commit版本覆盖当前工作区
    git checkout HEAD～ -- $file //指定文件，使用上个commit版本覆盖当前工作区
    git checkout HEAD^2 -- $file //指定文件，使用第二个父节点的commit版本覆盖当前工作区    
  临时保存工作现场(包括工作区和暂存区)，使工作区和暂存区恢复上一次commit的状态
    git stash list //查看当前临时工作区的stash列表，以堆栈形式保存，index为0是刚刚保存的工作区现场
    git stash save "some information about this stash" //临时保存工作现场，不包括untracked文件（继续保留为untracked状态），将工作区和暂存区都恢复到最近一次commit后的状态，没有任何修改
    git stash save -u "some information about this stash" //临时保存工作现场，包括untracked状态的文件
    git stash drop //默认删除最近一个入栈的stash对象
    git stash drop stash@{1} //删除下标为1的stash对象
    git stash pop //用栈顶的stash对象恢复工作现场，注意原本工作现场中工作区和暂存区的改动都会恢复到工作区
    git stash pop --index //用栈顶的stash对象恢复工作现场，注意原本工作现场中工作区和暂存区会 各自 恢复到原有的状态（而不是都恢复到工作区）
    git stash apply //与pop一样，只是stash对象仍然会保留到栈中
    git stash branch $newBrName stash@{1} //以下标为1的stash对象的工作现场创建新分支并切换到新分支，此时新分支的工作区和暂存区状态会跟stash对象工作现场保持一致
        
  
分支管理
  切换到已有分支
      git checkout $brName
  创建分支  
    直接创建，并切换到新分支
      git checkout -b $newBrName  
    根据远端tag版本创建新分支，并切换到新分支
      git checkout -b $newBrName $tagName
    根据远端commit版本创建新分支，并切换到新分支
      git checkout -b $newBrName $commitid 

版本管理  
  概念
    在git中每次修改的提交，都会给修改过的文件分配一个新的commit id。
    在git中我们可以用某个commit id来标识某一次提交的版本，某一个文件版本，这个概念称为revision。
  查看提交记录
    git log //默认查看当前分支的提交记录
    git log --grep=“keyword” //查看当前分支，提交comment信息中包含指定关键字的提交记录
    git log -n 3 //查看当前分支，指定只展示最近3个commit记录
    git log -- $file //查看当前分支，指定包含指定文件修改的提交记录
    git log --stat //查看当前分支，并展示文件修改行数统计
    git log --graph //查看当前分支，以可视化方式展示commit记录中分支合并关系，并格式化展示指定字段信息。其中
    git log --graph --format="%h %p %cd %s" //查看当前分支，以可视化方式展示commit记录中分支拓扑关系，并按格式化展示指定字段信息。其中%h为commit的简短id，%p为父commit的简短id, %cd为提交日期，%s为提交说明。
                                            //值得注意的是，%p展示的是父commit的列表，当存在分支合并时，合并后的commit节点就会有两个parent commit节点，父parent的顺序就是HEAD^n的顺序，HEAD^n表示第n个parent节点
    git log $brName //查看指定分支的提交记录
    git log $brName --oneline //查看指定分支，并以简洁格式展示（只有commitid前缀+comment）
    git log $brName --after="yyyy-mm-dd" --before="yyyy-mm-dd hh-mm-ss" --author="keyword" //查看指定分支，指定日期范围，指定作者（关键字）的提交记录
  查看当前分支 某个提交节点的revision
    git rev-parse HEAD //最近提交节点的commit id
    git rev-parse cdf1b14c01314d4353713b822d2231b9432c0ac5~1  //以cdf1b14c01314d4353713b822d2231b9432c0ac5作为revision的提交的 前一次提交的commit id
    git rev-parse --short HEAD //以简短形式查看提交的commit id
  查看当前分支 某次提交中某个文件的revision
    git rev-parse HEAD~9:somepath/README.md //查看HEAD往前第9次的提交中的README.md文件的commit id
  查看具体的文件内容修改
    git diff //查看工作区和暂存区之间的修改内容
    git diff --cached  //查看暂存区和最近commit版本的修改内容
     
  
origin概念
  实际上是用来表示当前本地仓库的clone源的url的别名。比如某个仓库的git源为git@github.com:git/git.git，那么git push origin master等价于git push git@github.com:git/git.git master

HEAD概念
  类似指针的概念，一般指向当前分支的最新commit版本。
  操作符
    脱字符（caret）：^   用于在多分支合并后commit节点存在相同层级的多个父节点时 选择具体顺序父节点的操作符
    波浪号（tilde）：~   用于向上选择某一层级的祖先节点，默认沿着第一父节点链路向上回溯。
  常用表达式
    HEAD~1，表示当前HEAD指向节点的前一个commit。依此类推，HEAD~N，表示当前HEAD指向的前N个commit。  
    HEAD^2，表示当前commit的第二个parent commit节点，因为当存在多个分支合并的时候，某个commit节点可能会有多个parent节点，parent节点的顺序可通过git log --graph --format="%h %p %cd %s"查看
    HEAD~，等价于HEAD~1
    HEAD^，等价于HEAD^1
    HEAD~0，表示当前HEAD指向的节点。
    HEAD^0，表示当前HEAD指向的节点。
    
    图例：
      G   H   I   J
       \ /     \ /
        D   E   F
         \  |  / \
          \ | /   |
           \|/    |
            B     C
             \   /
              \ /
               A
      
      A = A~0  = A^0
      B = A^   = A^1     = A~     = A~1
      C = A^2
      D = A^^  = A^1^1   = A~2
      E = B^2  = A^^2
      F = B^3  = A^^3
      G = A^^^ = A^1^1^1 = A~3
      H = D^2  = B^^2    = A^^^2  = A~2^2
      I = F^   = B^3^    = A^^3^
      J = F^2  = B^3^2   = A^^3^2






参考文档：https://initialcommit.com/cluster/git-guides-and-git-tutorials
