Chap3 Machine-Level Representation of Programs

A Historical Perspective
  - Computers execute machine code, sequences of bytes encoding the low-level operations that manipulate data, manage memory, read and write data on storage devices, and communicate over networks.
  - A compiler generates machine code through a series of stages, based on: the rules of the programming language / the instruction set of the target machine / the conventions followed by the operating system.
  - The GCC C compiler generates its output in the form of assembly code, then invokes both an assembler and a linker to generate the executable machine code from the assembly code.
  - A high-level language hides information about the run-time behavior of a program that we need to understand:
    - For example, understand how program data are shared or kept private by the different threads and precisely how and where shared data are accessed.
    - Understanding how vulnerabilities arise and how to guard against them requires a knowledge of the machine-level representation of programs.
  - What is x86-64?  
    - Instruction set architecture(ISA), sometimes also called computer architecture(not the micro processor physical architecture ), defines the supported instructions, data types, registers, the hardware support for managing main memory etc.
    - A device that executes instructions described by that ISA, such as a central processing unit (CPU), is called an implementation of that ISA.
    - A x86-64 is a 64-bit version of the x86 instruction set, first released in 1999. 
    - x86 (also known as 80x86 or the 8086 family) is a family of complex instruction set computer (CISC) instruction set architectures initially developed by Intel based on the Intel 8086.
    - this book's presentation is based on x86-64, the machine language(not machine code) for most of the processors found in today's laptop and desktop machines, as well as those that power very large data centers and supercomputers.
    - IA32, the 32-bit predecessor to x86-64, was introduced by Intel in 198S. It served as the machine language of choice for several decades. Most x86 microprocess sold today and opereating system designed to run on x86-64, can also execute IA32 programs in a backward compatibility mode.
  - The evolutionary development of Intel x86
    - It started with one of the first single-chip 16-bit microprocessors.
    - 8086: In 1987, One of the first single-chip, 16-bit microprocessors.
    - 8088: a variant of the 8086 with an 8-bit external bus, formed the heart of the original IBM personal computers.
    - 8087: In 1980, floating-point coprocessor, operate alongside an 8086 or 8088 processor, executing the floating-point instructions, established the floating-point model for the x86 line, often referred to as "x87."
    - 80286: In 1982, Added more (and now obsolete) addressing modes. Formed the basis of the IBM PC-AT personal computer, the original platform for MS Windows.
    - i386: In 1985, Expanded the architecture to 32 bits. Added the flat addressing model used by Linux and recent versions of the Windows operating system. This was the first machine in the series that could fully support a Unix operating system.
    - i486: In 1989, Improved performance and integrated the floating-point unit onto the processor chip but did not significantly change the instruction set.
    - Pentium: In 1993, Improved performance but only added minor extensions to the instruction set.
    - PentiumPro: In 1995, Introduced a radically new processor design, internally known as the P6 microarchitecture. Added a class of "conditional move" instructions to the instruction set.
    - Pentium/MMX: In 1997, Added new class of instructions to the Pentium processor for manipulating vectors of integers. Each datum can be 1, 2, or 4 bytes long. Each vector totals 64 bits.
    - PentiumII: In 1997, Continuation of the P6 microarchitecture
    - PentiumIII: In 1999, Introduced SSE, a class of instructions for manipulating vectors of integer or floating-point data. Each datum can be 1, 2, or 4 bytes, packed into vectors of 128 bits.
    - Pentium 4: In 2000, Extended SSE to SSE2, adding new data types (including double-precision floating point), along with 144 new instructions for these formats. With these extensions, compilers can use SSE instructions, rather than x87 instructions, to compile floating-point code.
    - Pentium4E: In 2004, Added hyperthreading, a method to run two programs simultaneously on a single processor, as well as EM64T, Intel's implementation of a 64-bit extension to IA32 developed by AMD ,which we refer to as x86-64.
    - Core 2: In 2006, Returned to a microarchitecture similar to P6. First multi-core Intel microprocessor, where multiple processors are implemented on a single chip. Did not support hyperthreading.
    - Corei7-Nehalem: In 2008, Incorporated both hyperthreading and multi-core, with the initial version supporting two executing programs on each core and up to four cores on each chip.
    - Core i7-Sandy Bridge: In 2011, Introduced AVX, an extension of the SSE to support data packed into 256-bit vectors.
    - Core i7, Haswell: In 2013, Extended AVX to AVX2, adding more instructions and instruction formats.
    - Each successive processor has been designed to be backward compatible, able to run code compiled for any earlier version.( there are many strange artifacts in the instruction set due to this evolutionary heritage).
    - Intel has had several names for their processor line, including "IA32"(for "Intel Architecture 32-bit" ) and most recently "Intel64"(the 64-bit extension to IA32) , which we will refer to as x86-64. 
    - We will refer to the overall line by the commonly used colloquial name "x86," reflecting the processor naming conventions up through the i486.

Program Encodings
- we use "linux> gcc -Og -o p p1.c p2.c" to generate executable machine code, and the option "-Og" is telling the compiler to apply a level of optimization that yields machine code that follows the overall structure of the original C code, instead of generating code that is so heavily transformed that the relationship between the generated machine code and the original source code is difficult to understand.
- In practice, higher levels of optimization (e.g., specified with the option -O1 or-O2) are considered a better choice in terms of the resulting program performance.
- The gee command invokes an entire sequence of programs to turn the source code into executable code:
  - First, the C "preprocessor" expands the source code to include any files specified with #include commands and to expand any macros, specified with #define declarations
  - Second, the "compiler" generates assembly code versions of the two source files having names p1.s and p2.s
  - Next, the "assembler" converts the assembly code into binary object-code(not executable yet) files p1.o and p2.o(Object-code is one form of machine code, it contains binary representations of all of the instructions, but the addresses of global values are not yet filled in)
  - Finally, the "linker" merges these two object-code files along with code implementing library functions (e.g. printf) and generates the final executable code file p (as specified by the command-line directive -o p). 
  - Executable code is the second form of machine code we will consider, it is the exact form of code that is executed by the processor.

Machine-Level Code
- computer systems employ several different forms of abstraction, hiding details of an implementation through the use of a simpler abstrac model. Two of these are especially important for machine-level programming:
  - First, the format and behavior of a machine-level program is defined by the instruction set architecture, or ISA. It defines the processor state, the format of the instructions, and the effect each of these instructions will have on the state.
  - Second, the memory addresses used by a machine-level program are virtual addresses, providing a memory model that appears to be a very large byte array.
- The compiler transforms programs expressed in the abstract execution model provided by C into the elementary instructions that the processor executes. 
- Being able to understand assembly code(very close to machine code, in a more readable textual format) and how it relates to the original C code is a key step in understanqing how computers execute programs.
- The machine code for x86-64 differs greatly from the original C code. Parts of the processor state are visible that normally are hidden from the C programmer. For example:
  - The program counter(PC or called %rip in x86-64): indicates the memory address of the next instruction to be executed
  - The integer register file: contains 16 nameed locations, each can store 64-bit values, like addresses (corresponding to C pointers) or integer data. some of them are used to keep track of  critical parts of the program state, while others are used to hold temporary data(the arguments and local variables of a procedure/ the value to be returned by a function/ etc.)
  - The condition code registers: hold status information about the most recently executed arithmetic or logical instruction. These are used to implement conditional changes in the control or data flow, such as is required to implement if and while statements.
  - A set of vector registers: each one can hold one or more integer or floating-point values.
- C provides a model in which objects of different data types can be declared and allocated in memory, machine code views the memory as simply a large byte-addressable array.
- Aggregate data types in C such as arrays and structures, are represented in machine code as contiguous collections of bytes.
- Even for scalar data types, assembly code makes no distinctions between signed or unsigned integers, between different types of pointers, or even between pointers and integers.
- The program memory, contains multiple parts:
  - the executable machine code for the program
  - some information required by the operating system
  - a run-time stack for mqnaging procedure calls and returns
  - blocks of memory allocated by the user
- The program memory is addressed using virtual addresses, but only limited subranges  of virtual addresses are considered valid.(For example, x86-64 virtual addresses are represented by 64-bit words. In current implementations of these machines, the upper 16 bits must be set to zero, and so an address can potentially specify a byte over a range of 2^(64-16) -> 2^(48) )
- The operating system manages this virtual address space, translating virtual addresses into the physical addresses of values in the actual processor memory
- A single machine instruction performs only a very elementary operation, for example:
  - add two numbers stored in registers
  - transfer data between memory and a register
  - conditionally branch to a new instruction address

Code Examples
  - we have C code file mstore.c, containing the following function definition:
              long mult2(long, long);
              void multstore(long x, long y, long *dest) { 
                  long t = mult2(x, y);
                  *dest = t;
              }
  - To see the assembly code generated by the C compiler, it will generate the mstore.s file by using the following command:
      linux>  gcc -Og -S mstore.c
  - The generated assembly-code file may contains various declarations like this:
        multstore:
          pushq %rbx
          movq %rdx, %rbx
          call mult2
          movq %rax, (%rbx)
          popq %rbx
          ret
  - each indented line showed above corresonds to a single machine instruction
  - we can both compile and assemble the code by using command, we will get mstore.o that is binary format
      linux> gcc -Og -c mstore.c
  - the multstore function's assembly-code in binary format, embedded within the file mstore.o, would probably be:
      53 48 89 d3 e8 00 00 00 00 48 89 03 5b c3  
  - that means, the program executed by the machine is simply a sequence of bytes encoding a series of instructions. The machine has very little information about the source code from which these instructions were generated.
  - we can use objdump tool to inspect the contents of machine-code files:
    linux> objdump -d mstore.o
  - Several features about machine code are worth noting:
    - x86-64 instructions can range in length from 1 to 15 bytes. 
    - The instruction encoding is designed so that commonly used instructions and those with fewer operands require a smaller number of bytes(than not commonly used ones, or ones with more operands).
    - The instruction format is designed in such a way that from a given starting position, there is a unique decoding of the bytes into machine instructions. For example, only the instruction pushq %rbx can start with byte value 53.
    - The disassembler determines the assembly code based purely on the byte sequences in the machine-code file. It does not require access to the source or assembly-code versions of the program        
    - The disassembler uses a slightly different naming convention for the instructions than does the assembly code generated by gcc.
  - Generating the actual executable code requires running a linker on the set of object-code files, one of which must contain a function main.
  - if we add a main.c file as follows:
        #include<stdio.h>
        void multstore(long, long, long *);
        int main(){
          long d;
          multstore(2, 3, &d);
          printf("2*3 --> %ld\n", d);
          return 0;
        }

        long mult2(long a, long b){
          long s = a * b;
          return s;
        }
  - then generate an executable program by:
        linux> gcc -Og -o prog main.c mstore.c
  - the file prog now contains not just the machine code for the multstore procedures but also code used to start and terminate the program as well as to interact with the operating system. 
  - then we disassemble the executable file by:
        linux> objdump -d prog
  - the disassembler will extract various code sequence, include the assembly-code of multstore procedure we mentioned before, but there are a few differences:
    - the linker has shifted the location of this code to a different range of addresses
    - the linker has filled in the address that the callq instruction should use in calling the function mult2
    - two additional lines of code, inserted to grow the code for the function to 16 bytes, enabling a better placement of the next block of code in terms of memory system performance

Notes on Formatting
  - In our presentation we show assembly code in ATT format, which is the default format for gcc and objdump, and is different from Intel Format.
  - If we want gcc to generate assembly code in Intel format, we can use -masm option like:
      linux> gcc -Og -S -masm=intel mstore.c

Data Formats
  - Due to its origins as a 16-bit architecture that expanded into a 32-bit one, Intel uses the term "word" to refer to a 16-bit data type. Based on this, they refer to 32- bit quantities as "double words," and 64-bit quantities as "quad words.
  - Figure 3.1 shows the x86-64 representations used for the primitive data types of C. Standard int values are stored as double words (32 bits). Pointers (shown here as char*) are stored as 8-byte quad words, as would be expected in a 64-bit machine. 
  - With x86-64, data type long is implemented with 64 bits, allowing a very wide range of values. Most of our code examples in this chapter use pointers and long data types, and so they will operate on quad words.
  - The x86-64 instruction set includes a full complement of instructions for bytes, words, and double words as well.




